-- Finance model
-- Code generated by Data Dictionary Builder (c) Valery Lobachev (https://github.com/valerylobachev/data-dictionary-builder).
-- Date: 2024-08-18 21:59:57


CREATE TABLE audit (
  "table" text NOT NULL,
  "id" text NOT NULL,
  "counter" bigserial NOT NULL,
  "dt" timestamptz NOT NULL,
  "operation" varchar(1) NOT NULL,
  "prev_data" jsonb,
  "new_data" jsonb,
  "updated_by" text,
  PRIMARY KEY ("table", "id", "counter")
);

CREATE TABLE bp_audit (
  "table" text NOT NULL,
  "id" text NOT NULL,
  "counter" bigserial NOT NULL,
  "dt" timestamptz NOT NULL,
  "operation" varchar(1) NOT NULL,
  "prev_data" jsonb,
  "new_data" jsonb,
  "updated_by" text,
  PRIMARY KEY ("table", "id", "counter")
);

CREATE OR REPLACE FUNCTION jsonb_diff_val(val1 JSONB, val2 JSONB)
    RETURNS JSONB AS
$$
DECLARE
    result JSONB;
    v      RECORD;
BEGIN
    result = val1;
    FOR v IN SELECT * FROM jsonb_each(val2)
        LOOP
            IF result @> jsonb_build_object(v.key, v.value)
            THEN
                result = result - v.key;
            ELSIF result ? v.key THEN
                CONTINUE;
            ELSE
                result = result || jsonb_build_object(v.key, 'null');
            END IF;
        END LOOP;
    RETURN result;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION countries_audit_func()
    RETURNS trigger AS
$$
BEGIN
    if (TG_OP = 'INSERT') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'I',
                null,
                to_jsonb(NEW),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'UPDATE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'U',
                jsonb_diff_val(to_jsonb(OLD), to_jsonb(NEW)),
                jsonb_diff_val(to_jsonb(NEW), to_jsonb(OLD)),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'DELETE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                OLD."id"::text,
                CURRENT_TIMESTAMP,
                'D',
                to_jsonb(OLD),
                NULL,
                NULL);

        RETURN OLD;
    end if;

END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER countries_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON "countries"
    FOR EACH ROW
EXECUTE FUNCTION countries_audit_func(); 

CREATE OR REPLACE FUNCTION languages_audit_func()
    RETURNS trigger AS
$$
BEGIN
    if (TG_OP = 'INSERT') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'I',
                null,
                to_jsonb(NEW),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'UPDATE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'U',
                jsonb_diff_val(to_jsonb(OLD), to_jsonb(NEW)),
                jsonb_diff_val(to_jsonb(NEW), to_jsonb(OLD)),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'DELETE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                OLD."id"::text,
                CURRENT_TIMESTAMP,
                'D',
                to_jsonb(OLD),
                NULL,
                NULL);

        RETURN OLD;
    end if;

END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER languages_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON "languages"
    FOR EACH ROW
EXECUTE FUNCTION languages_audit_func(); 

CREATE OR REPLACE FUNCTION currencies_audit_func()
    RETURNS trigger AS
$$
BEGIN
    if (TG_OP = 'INSERT') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'I',
                null,
                to_jsonb(NEW),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'UPDATE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'U',
                jsonb_diff_val(to_jsonb(OLD), to_jsonb(NEW)),
                jsonb_diff_val(to_jsonb(NEW), to_jsonb(OLD)),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'DELETE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                OLD."id"::text,
                CURRENT_TIMESTAMP,
                'D',
                to_jsonb(OLD),
                NULL,
                NULL);

        RETURN OLD;
    end if;

END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER currencies_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON "currencies"
    FOR EACH ROW
EXECUTE FUNCTION currencies_audit_func(); 

CREATE OR REPLACE FUNCTION exchange_rate_types_audit_func()
    RETURNS trigger AS
$$
BEGIN
    if (TG_OP = 'INSERT') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'I',
                null,
                to_jsonb(NEW),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'UPDATE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'U',
                jsonb_diff_val(to_jsonb(OLD), to_jsonb(NEW)),
                jsonb_diff_val(to_jsonb(NEW), to_jsonb(OLD)),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'DELETE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                OLD."id"::text,
                CURRENT_TIMESTAMP,
                'D',
                to_jsonb(OLD),
                NULL,
                NULL);

        RETURN OLD;
    end if;

END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER exchange_rate_types_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON "exchange_rate_types"
    FOR EACH ROW
EXECUTE FUNCTION exchange_rate_types_audit_func(); 

CREATE OR REPLACE FUNCTION exchange_rates_audit_func()
    RETURNS trigger AS
$$
BEGIN
    if (TG_OP = 'INSERT') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."exchange_rate_type_id"::text || '|' || NEW."from_currency_id"::text || '|' || NEW."to_currency_id"::text || '|' || NEW."effective_from"::text,
                CURRENT_TIMESTAMP,
                'I',
                null,
                to_jsonb(NEW),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'UPDATE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."exchange_rate_type_id"::text || '|' || NEW."from_currency_id"::text || '|' || NEW."to_currency_id"::text || '|' || NEW."effective_from"::text,
                CURRENT_TIMESTAMP,
                'U',
                jsonb_diff_val(to_jsonb(OLD), to_jsonb(NEW)),
                jsonb_diff_val(to_jsonb(NEW), to_jsonb(OLD)),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'DELETE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                OLD."exchange_rate_type_id"::text || '|' || OLD."from_currency_id"::text || '|' || OLD."to_currency_id"::text || '|' || OLD."effective_from"::text,
                CURRENT_TIMESTAMP,
                'D',
                to_jsonb(OLD),
                NULL,
                NULL);

        RETURN OLD;
    end if;

END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER exchange_rates_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON "exchange_rates"
    FOR EACH ROW
EXECUTE FUNCTION exchange_rates_audit_func(); 

CREATE OR REPLACE FUNCTION units_of_measurement_audit_func()
    RETURNS trigger AS
$$
BEGIN
    if (TG_OP = 'INSERT') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'I',
                null,
                to_jsonb(NEW),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'UPDATE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'U',
                jsonb_diff_val(to_jsonb(OLD), to_jsonb(NEW)),
                jsonb_diff_val(to_jsonb(NEW), to_jsonb(OLD)),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'DELETE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                OLD."id"::text,
                CURRENT_TIMESTAMP,
                'D',
                to_jsonb(OLD),
                NULL,
                NULL);

        RETURN OLD;
    end if;

END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER units_of_measurement_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON "units_of_measurement"
    FOR EACH ROW
EXECUTE FUNCTION units_of_measurement_audit_func(); 

CREATE OR REPLACE FUNCTION uom_texts_audit_func()
    RETURNS trigger AS
$$
BEGIN
    if (TG_OP = 'INSERT') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."language_id"::text || '|' || NEW."uom_id"::text,
                CURRENT_TIMESTAMP,
                'I',
                null,
                to_jsonb(NEW),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'UPDATE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."language_id"::text || '|' || NEW."uom_id"::text,
                CURRENT_TIMESTAMP,
                'U',
                jsonb_diff_val(to_jsonb(OLD), to_jsonb(NEW)),
                jsonb_diff_val(to_jsonb(NEW), to_jsonb(OLD)),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'DELETE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                OLD."language_id"::text || '|' || OLD."uom_id"::text,
                CURRENT_TIMESTAMP,
                'D',
                to_jsonb(OLD),
                NULL,
                NULL);

        RETURN OLD;
    end if;

END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER uom_texts_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON "uom_texts"
    FOR EACH ROW
EXECUTE FUNCTION uom_texts_audit_func(); 

CREATE OR REPLACE FUNCTION company_codes_audit_func()
    RETURNS trigger AS
$$
BEGIN
    if (TG_OP = 'INSERT') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'I',
                null,
                to_jsonb(NEW),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'UPDATE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'U',
                jsonb_diff_val(to_jsonb(OLD), to_jsonb(NEW)),
                jsonb_diff_val(to_jsonb(NEW), to_jsonb(OLD)),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'DELETE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                OLD."id"::text,
                CURRENT_TIMESTAMP,
                'D',
                to_jsonb(OLD),
                NULL,
                NULL);

        RETURN OLD;
    end if;

END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER company_codes_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON "company_code"."company_codes"
    FOR EACH ROW
EXECUTE FUNCTION company_codes_audit_func(); 

CREATE OR REPLACE FUNCTION company_code_ledgers_audit_func()
    RETURNS trigger AS
$$
BEGIN
    if (TG_OP = 'INSERT') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."company_code_id"::text || '|' || NEW."ledger_id"::text,
                CURRENT_TIMESTAMP,
                'I',
                null,
                to_jsonb(NEW),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'UPDATE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."company_code_id"::text || '|' || NEW."ledger_id"::text,
                CURRENT_TIMESTAMP,
                'U',
                jsonb_diff_val(to_jsonb(OLD), to_jsonb(NEW)),
                jsonb_diff_val(to_jsonb(NEW), to_jsonb(OLD)),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'DELETE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                OLD."company_code_id"::text || '|' || OLD."ledger_id"::text,
                CURRENT_TIMESTAMP,
                'D',
                to_jsonb(OLD),
                NULL,
                NULL);

        RETURN OLD;
    end if;

END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER company_code_ledgers_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON "company_code"."company_code_ledgers"
    FOR EACH ROW
EXECUTE FUNCTION company_code_ledgers_audit_func(); 

CREATE OR REPLACE FUNCTION fy_variants_audit_func()
    RETURNS trigger AS
$$
BEGIN
    if (TG_OP = 'INSERT') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'I',
                null,
                to_jsonb(NEW),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'UPDATE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'U',
                jsonb_diff_val(to_jsonb(OLD), to_jsonb(NEW)),
                jsonb_diff_val(to_jsonb(NEW), to_jsonb(OLD)),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'DELETE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                OLD."id"::text,
                CURRENT_TIMESTAMP,
                'D',
                to_jsonb(OLD),
                NULL,
                NULL);

        RETURN OLD;
    end if;

END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER fy_variants_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON "company_code"."fy_variants"
    FOR EACH ROW
EXECUTE FUNCTION fy_variants_audit_func(); 

CREATE OR REPLACE FUNCTION posting_period_variants_audit_func()
    RETURNS trigger AS
$$
BEGIN
    if (TG_OP = 'INSERT') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'I',
                null,
                to_jsonb(NEW),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'UPDATE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'U',
                jsonb_diff_val(to_jsonb(OLD), to_jsonb(NEW)),
                jsonb_diff_val(to_jsonb(NEW), to_jsonb(OLD)),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'DELETE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                OLD."id"::text,
                CURRENT_TIMESTAMP,
                'D',
                to_jsonb(OLD),
                NULL,
                NULL);

        RETURN OLD;
    end if;

END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER posting_period_variants_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON "company_code"."posting_period_variants"
    FOR EACH ROW
EXECUTE FUNCTION posting_period_variants_audit_func(); 

CREATE OR REPLACE FUNCTION open_periods_audit_func()
    RETURNS trigger AS
$$
BEGIN
    if (TG_OP = 'INSERT') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."posting_period_variant_id"::text || '|' || NEW."account_type"::text || '|' || NEW."to_account"::text,
                CURRENT_TIMESTAMP,
                'I',
                null,
                to_jsonb(NEW),
                NULL);

        RETURN NEW;
    elsif (TG_OP = 'UPDATE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."posting_period_variant_id"::text || '|' || NEW."account_type"::text || '|' || NEW."to_account"::text,
                CURRENT_TIMESTAMP,
                'U',
                jsonb_diff_val(to_jsonb(OLD), to_jsonb(NEW)),
                jsonb_diff_val(to_jsonb(NEW), to_jsonb(OLD)),
                NULL);

        RETURN NEW;
    elsif (TG_OP = 'DELETE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                OLD."posting_period_variant_id"::text || '|' || OLD."account_type"::text || '|' || OLD."to_account"::text,
                CURRENT_TIMESTAMP,
                'D',
                to_jsonb(OLD),
                NULL,
                NULL);

        RETURN OLD;
    end if;

END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER open_periods_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON "company_code"."open_periods"
    FOR EACH ROW
EXECUTE FUNCTION open_periods_audit_func(); 

CREATE OR REPLACE FUNCTION charts_of_accounts_audit_func()
    RETURNS trigger AS
$$
BEGIN
    if (TG_OP = 'INSERT') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'I',
                null,
                to_jsonb(NEW),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'UPDATE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'U',
                jsonb_diff_val(to_jsonb(OLD), to_jsonb(NEW)),
                jsonb_diff_val(to_jsonb(NEW), to_jsonb(OLD)),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'DELETE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                OLD."id"::text,
                CURRENT_TIMESTAMP,
                'D',
                to_jsonb(OLD),
                NULL,
                NULL);

        RETURN OLD;
    end if;

END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER charts_of_accounts_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON "gl_account"."charts_of_accounts"
    FOR EACH ROW
EXECUTE FUNCTION charts_of_accounts_audit_func(); 

CREATE OR REPLACE FUNCTION gl_accounts_audit_func()
    RETURNS trigger AS
$$
BEGIN
    if (TG_OP = 'INSERT') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."chart_of_accounts_id"::text || '|' || NEW."gl_account_id"::text,
                CURRENT_TIMESTAMP,
                'I',
                null,
                to_jsonb(NEW),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'UPDATE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."chart_of_accounts_id"::text || '|' || NEW."gl_account_id"::text,
                CURRENT_TIMESTAMP,
                'U',
                jsonb_diff_val(to_jsonb(OLD), to_jsonb(NEW)),
                jsonb_diff_val(to_jsonb(NEW), to_jsonb(OLD)),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'DELETE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                OLD."chart_of_accounts_id"::text || '|' || OLD."gl_account_id"::text,
                CURRENT_TIMESTAMP,
                'D',
                to_jsonb(OLD),
                NULL,
                NULL);

        RETURN OLD;
    end if;

END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER gl_accounts_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON "gl_account"."gl_accounts"
    FOR EACH ROW
EXECUTE FUNCTION gl_accounts_audit_func(); 

CREATE OR REPLACE FUNCTION gl_account_groups_audit_func()
    RETURNS trigger AS
$$
BEGIN
    if (TG_OP = 'INSERT') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."chart_of_accounts_id"::text || '|' || NEW."gl_account_group_id"::text,
                CURRENT_TIMESTAMP,
                'I',
                null,
                to_jsonb(NEW),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'UPDATE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."chart_of_accounts_id"::text || '|' || NEW."gl_account_group_id"::text,
                CURRENT_TIMESTAMP,
                'U',
                jsonb_diff_val(to_jsonb(OLD), to_jsonb(NEW)),
                jsonb_diff_val(to_jsonb(NEW), to_jsonb(OLD)),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'DELETE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                OLD."chart_of_accounts_id"::text || '|' || OLD."gl_account_group_id"::text,
                CURRENT_TIMESTAMP,
                'D',
                to_jsonb(OLD),
                NULL,
                NULL);

        RETURN OLD;
    end if;

END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER gl_account_groups_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON "gl_account"."gl_account_groups"
    FOR EACH ROW
EXECUTE FUNCTION gl_account_groups_audit_func(); 

CREATE OR REPLACE FUNCTION ledgers_audit_func()
    RETURNS trigger AS
$$
BEGIN
    if (TG_OP = 'INSERT') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'I',
                null,
                to_jsonb(NEW),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'UPDATE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'U',
                jsonb_diff_val(to_jsonb(OLD), to_jsonb(NEW)),
                jsonb_diff_val(to_jsonb(NEW), to_jsonb(OLD)),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'DELETE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                OLD."id"::text,
                CURRENT_TIMESTAMP,
                'D',
                to_jsonb(OLD),
                NULL,
                NULL);

        RETURN OLD;
    end if;

END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER ledgers_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON "ledger"."ledgers"
    FOR EACH ROW
EXECUTE FUNCTION ledgers_audit_func(); 

CREATE OR REPLACE FUNCTION ledger_groups_audit_func()
    RETURNS trigger AS
$$
BEGIN
    if (TG_OP = 'INSERT') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'I',
                null,
                to_jsonb(NEW),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'UPDATE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'U',
                jsonb_diff_val(to_jsonb(OLD), to_jsonb(NEW)),
                jsonb_diff_val(to_jsonb(NEW), to_jsonb(OLD)),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'DELETE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                OLD."id"::text,
                CURRENT_TIMESTAMP,
                'D',
                to_jsonb(OLD),
                NULL,
                NULL);

        RETURN OLD;
    end if;

END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER ledger_groups_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON "ledger"."ledger_groups"
    FOR EACH ROW
EXECUTE FUNCTION ledger_groups_audit_func(); 

CREATE OR REPLACE FUNCTION ledger_group_ledgers_audit_func()
    RETURNS trigger AS
$$
BEGIN
    if (TG_OP = 'INSERT') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."ledger_group_id"::text || '|' || NEW."ledger_id"::text,
                CURRENT_TIMESTAMP,
                'I',
                null,
                to_jsonb(NEW),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'UPDATE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."ledger_group_id"::text || '|' || NEW."ledger_id"::text,
                CURRENT_TIMESTAMP,
                'U',
                jsonb_diff_val(to_jsonb(OLD), to_jsonb(NEW)),
                jsonb_diff_val(to_jsonb(NEW), to_jsonb(OLD)),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'DELETE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                OLD."ledger_group_id"::text || '|' || OLD."ledger_id"::text,
                CURRENT_TIMESTAMP,
                'D',
                to_jsonb(OLD),
                NULL,
                NULL);

        RETURN OLD;
    end if;

END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER ledger_group_ledgers_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON "ledger"."ledger_group_ledgers"
    FOR EACH ROW
EXECUTE FUNCTION ledger_group_ledgers_audit_func(); 

CREATE OR REPLACE FUNCTION ledger_entries_audit_func()
    RETURNS trigger AS
$$
BEGIN
    if (TG_OP = 'INSERT') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."entry_no"::text,
                CURRENT_TIMESTAMP,
                'I',
                null,
                to_jsonb(NEW),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'UPDATE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."entry_no"::text,
                CURRENT_TIMESTAMP,
                'U',
                jsonb_diff_val(to_jsonb(OLD), to_jsonb(NEW)),
                jsonb_diff_val(to_jsonb(NEW), to_jsonb(OLD)),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'DELETE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                OLD."entry_no"::text,
                CURRENT_TIMESTAMP,
                'D',
                to_jsonb(OLD),
                NULL,
                NULL);

        RETURN OLD;
    end if;

END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER ledger_entries_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON "ledger_entry"."ledger_entries"
    FOR EACH ROW
EXECUTE FUNCTION ledger_entries_audit_func(); 

CREATE OR REPLACE FUNCTION ledger_entry_attributes_audit_func()
    RETURNS trigger AS
$$
BEGIN
    if (TG_OP = 'INSERT') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."entry_no"::text || '|' || NEW."attribute_id"::text || '|' || NEW."attribute_value_id"::text,
                CURRENT_TIMESTAMP,
                'I',
                null,
                to_jsonb(NEW),
                NULL);

        RETURN NEW;
    elsif (TG_OP = 'UPDATE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."entry_no"::text || '|' || NEW."attribute_id"::text || '|' || NEW."attribute_value_id"::text,
                CURRENT_TIMESTAMP,
                'U',
                jsonb_diff_val(to_jsonb(OLD), to_jsonb(NEW)),
                jsonb_diff_val(to_jsonb(NEW), to_jsonb(OLD)),
                NULL);

        RETURN NEW;
    elsif (TG_OP = 'DELETE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                OLD."entry_no"::text || '|' || OLD."attribute_id"::text || '|' || OLD."attribute_value_id"::text,
                CURRENT_TIMESTAMP,
                'D',
                to_jsonb(OLD),
                NULL,
                NULL);

        RETURN OLD;
    end if;

END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER ledger_entry_attributes_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON "ledger_entry"."ledger_entry_attributes"
    FOR EACH ROW
EXECUTE FUNCTION ledger_entry_attributes_audit_func(); 

CREATE OR REPLACE FUNCTION creditors_audit_func()
    RETURNS trigger AS
$$
BEGIN
    if (TG_OP = 'INSERT') then
        INSERT INTO bp_audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'I',
                null,
                to_jsonb(NEW),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'UPDATE') then
        INSERT INTO bp_audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'U',
                jsonb_diff_val(to_jsonb(OLD), to_jsonb(NEW)),
                jsonb_diff_val(to_jsonb(NEW), to_jsonb(OLD)),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'DELETE') then
        INSERT INTO bp_audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                OLD."id"::text,
                CURRENT_TIMESTAMP,
                'D',
                to_jsonb(OLD),
                NULL,
                NULL);

        RETURN OLD;
    end if;

END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER creditors_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON "bp"."creditors"
    FOR EACH ROW
EXECUTE FUNCTION creditors_audit_func(); 

CREATE OR REPLACE FUNCTION debtors_audit_func()
    RETURNS trigger AS
$$
BEGIN
    if (TG_OP = 'INSERT') then
        INSERT INTO bp_audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'I',
                null,
                to_jsonb(NEW),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'UPDATE') then
        INSERT INTO bp_audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'U',
                jsonb_diff_val(to_jsonb(OLD), to_jsonb(NEW)),
                jsonb_diff_val(to_jsonb(NEW), to_jsonb(OLD)),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'DELETE') then
        INSERT INTO bp_audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                OLD."id"::text,
                CURRENT_TIMESTAMP,
                'D',
                to_jsonb(OLD),
                NULL,
                NULL);

        RETURN OLD;
    end if;

END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER debtors_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON "bp"."debtors"
    FOR EACH ROW
EXECUTE FUNCTION debtors_audit_func(); 

CREATE OR REPLACE FUNCTION business_partners_audit_func()
    RETURNS trigger AS
$$
BEGIN
    if (TG_OP = 'INSERT') then
        INSERT INTO bp_audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'I',
                null,
                to_jsonb(NEW),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'UPDATE') then
        INSERT INTO bp_audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'U',
                jsonb_diff_val(to_jsonb(OLD), to_jsonb(NEW)),
                jsonb_diff_val(to_jsonb(NEW), to_jsonb(OLD)),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'DELETE') then
        INSERT INTO bp_audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                OLD."id"::text,
                CURRENT_TIMESTAMP,
                'D',
                to_jsonb(OLD),
                NULL,
                NULL);

        RETURN OLD;
    end if;

END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER business_partners_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON "bp"."business_partners"
    FOR EACH ROW
EXECUTE FUNCTION business_partners_audit_func(); 

CREATE OR REPLACE FUNCTION materials_audit_func()
    RETURNS trigger AS
$$
BEGIN
    if (TG_OP = 'INSERT') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'I',
                null,
                to_jsonb(NEW),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'UPDATE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'U',
                jsonb_diff_val(to_jsonb(OLD), to_jsonb(NEW)),
                jsonb_diff_val(to_jsonb(NEW), to_jsonb(OLD)),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'DELETE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                OLD."id"::text,
                CURRENT_TIMESTAMP,
                'D',
                to_jsonb(OLD),
                NULL,
                NULL);

        RETURN OLD;
    end if;

END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER materials_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON "logistic"."materials"
    FOR EACH ROW
EXECUTE FUNCTION materials_audit_func(); 

CREATE OR REPLACE FUNCTION plants_audit_func()
    RETURNS trigger AS
$$
BEGIN
    if (TG_OP = 'INSERT') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'I',
                null,
                to_jsonb(NEW),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'UPDATE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."id"::text,
                CURRENT_TIMESTAMP,
                'U',
                jsonb_diff_val(to_jsonb(OLD), to_jsonb(NEW)),
                jsonb_diff_val(to_jsonb(NEW), to_jsonb(OLD)),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'DELETE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                OLD."id"::text,
                CURRENT_TIMESTAMP,
                'D',
                to_jsonb(OLD),
                NULL,
                NULL);

        RETURN OLD;
    end if;

END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER plants_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON "logistic"."plants"
    FOR EACH ROW
EXECUTE FUNCTION plants_audit_func(); 

CREATE OR REPLACE FUNCTION locations_audit_func()
    RETURNS trigger AS
$$
BEGIN
    if (TG_OP = 'INSERT') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."plant_id"::text || '|' || NEW."location_id"::text,
                CURRENT_TIMESTAMP,
                'I',
                null,
                to_jsonb(NEW),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'UPDATE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                NEW."plant_id"::text || '|' || NEW."location_id"::text,
                CURRENT_TIMESTAMP,
                'U',
                jsonb_diff_val(to_jsonb(OLD), to_jsonb(NEW)),
                jsonb_diff_val(to_jsonb(NEW), to_jsonb(OLD)),
                NEW."updated_by");

        RETURN NEW;
    elsif (TG_OP = 'DELETE') then
        INSERT INTO audit ("table",
                            id,
                            dt,
                            operation,
                            prev_data,
                            new_data,
                            updated_by)
        VALUES (TG_TABLE_NAME,
                OLD."plant_id"::text || '|' || OLD."location_id"::text,
                CURRENT_TIMESTAMP,
                'D',
                to_jsonb(OLD),
                NULL,
                NULL);

        RETURN OLD;
    end if;

END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER locations_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON "logistic"."locations"
    FOR EACH ROW
EXECUTE FUNCTION locations_audit_func(); 
